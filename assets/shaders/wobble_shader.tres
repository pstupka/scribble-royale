[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;

uniform sampler2D flowMap; //Displacement map
uniform float strength;    //Force of the effect
uniform float speed;       //Speed of the effect
uniform int frames : hint_range(1, 10); //Frames of the effect

//Returns a value between 0 and 1 depending of the frames -> exemple: frames = 4, frame 1 = 0.25
float clock(float time){
	float fframes = float(frames);
	return floor(mod(time * speed, fframes)) / fframes;
}

void fragment(){
	float c = clock(TIME); //Get clock frame
	vec4 offset = texture(flowMap, vec2(UV.x + c, UV.y + c)) * strength; //Get offset 
	//COLOR = texture(TEXTURE, vec2(UV.x,UV.y) + normal.xy); //Apply offset
	COLOR = texture(TEXTURE, vec2(UV.x,UV.y) + offset.xy - vec2(0.5,0.5)*strength); //We need to remove the displacement 
}


// TEST CLOCK
/*
void fragment(){
	float c = clock(TIME);
	COLOR = vec4( c, c, c, 1);
}
*/"

[sub_resource type="OpenSimplexNoise" id=15]
seed = 7
octaves = 1
period = 10.0
persistence = 1.0

[sub_resource type="NoiseTexture" id=16]
width = 64
height = 64
seamless = true
noise = SubResource( 15 )

[resource]
shader = SubResource( 13 )
shader_param/strength = 0.04
shader_param/speed = 10.0
shader_param/frames = 10
shader_param/flowMap = SubResource( 16 )
